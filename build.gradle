buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.5-SNAPSHOT'
    id 'de.undercouch.download' version '3.1.0'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

marytts {
    voice {
    name = 'dfki-ot'
    language = 'tr'
    gender = 'male'
    type = 'unit selection'
    description = 'A male Turkish unit selection voice'
    license {
        name = 'Creative Commons Attribution-NoDerivs 3.0 Unported'
        shortName = 'CC-BY-ND'
        url = 'http://mary.dfki.de/download/by-nd-3.0.html'
    }
    samplingRate = 16000
}
}

ext {
    flacFile = file("$buildDir/dfki-ot-data.flac")
    yamlFile = file("$buildDir/dfki-ot-data.yaml")
}

import de.undercouch.gradle.tasks.download.Download
import org.yaml.snakeyaml.Yaml

task downloadAudio(type: Download) {
    src "https://github.com/marytts/dfki-ot-data/releases/download/v0.1/$flacFile.name"
    dest flacFile
    overwrite false
    acceptAnyCertificate true
}

task downloadData(type: Download) {
    src "https://github.com/marytts/dfki-ot-data/releases/download/v0.1/$yamlFile.name"
    dest yamlFile
    overwrite false
    acceptAnyCertificate true
}

task extractLab {
    dependsOn downloadData
    ext.destDir = file("$buildDir/lab")
    inputs.file yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                file("$destDir/${utterance.prompt}.lab").withWriter { writer ->
                    writer.println '#'
                    def end = 0.0
                    utterance.segments.each { segment ->
                        end += segment.dur
                        writer.println "${end.round(6)} 125 $segment.lab"
                    }
                }
            }
        }
    }
}

task extractText {
    dependsOn downloadData
    ext.destDir = file("$buildDir/text")
    inputs.file yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                file("$destDir/${utterance.prompt}.txt").withWriter { writer ->
                    writer.println utterance.text
                }
            }
        }
    }
}

task extractWav {
    dependsOn downloadData, downloadAudio
    ext.destDir = file("$buildDir/wav")
    inputs.files yamlFile, flacFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                exec {
                    commandLine 'sox', flacFile, "$destDir/${utterance.prompt}.wav",
                            'trim', utterance.start, "=$utterance.end",
                            'rate', marytts.voice.samplingRate
                }
            }
        }
    }
}

basenames {
    dependsOn "extractWav", "extractText", "extractLab"
    wavDir = extractWav.destDir
    textDir = extractText.destDir
    labDir = extractLab.destDir
    include '*'
    exclude "w0158"
}

/*
generateVoiceConfig {
    afterEvaluate {
        config << [
                targetCostWeights: "jar:/marytts/voice/$voice.nameCamelCase/customTargetCostWeights.txt",
                joinCostWeights  : "jar:/marytts/voice/$voice.nameCamelCase/customJoinCostWeights.txt",
        ]
    }
}
*/
